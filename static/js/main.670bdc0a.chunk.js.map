{"version":3,"sources":["components/HelpMe.jsx","components/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["HelpMe","style","background","color","Form","props","useState","name","errorName","flagName","password","errorPass","flagPass","valid","state","setState","handleInputChange","event","target","value","key","length","match","onSubmit","getParams","bind","placeholder","type","onChange","to","onClick","JSON","stringify","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.670bdc0a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Request from './Request';\r\nimport {Router} from 'react-router-dom'\r\n\r\nconst HelpMe = () => {\r\n   \r\n  // const [ state, setState ] = useState({\r\n\r\n  //   color: 'red',\r\n  //   flag: true,\r\n\r\n  // })\r\n\r\n\r\n\r\n  // function func() {\r\n  //   setState({\r\n  //     ...state,\r\n  //     flag: !state.flag,\r\n  //     // path: e\r\n  //   })\r\n  \r\n  // }\r\n\r\n   return (\r\n     <div>\r\n       {/* <button style={{color: 'red'}} value='A' onClick={func}>A</button>\r\n       <button style={{color: 'red'}} value='P' onClick={func}>P</button>\r\n       <button style={{color: 'red'}} value='F' onClick={func}>F</button> */}\r\n       <button>Menu</button>\r\n       <hr/>\r\n       <button style={{ background: 'red', color: 'white' }}>Help</button>\r\n       <br />\r\n       \r\n       HELP ME!\r\n       \r\n      {/* <Router path={`/Request`} component={() =><Request />} /> */}\r\n       {/* <pre>{JSON.stringify(state, null, 2)}</pre> */}\r\n     </div>\r\n   );\r\n}\r\nexport default HelpMe;","import React, { useState } from \"react\";\r\nimport {Link} from \"react-router-dom\"\r\nimport HelpMe from \"./HelpMe\";\r\n\r\n\r\nconst Form = (props) => {\r\n\r\n  const [state, setState] = useState({\r\n    name: \"\",\r\n    errorName: \"Error Name\",\r\n    flagName: false,\r\n    password: \"\",\r\n    errorPass: \"Error Password\",\r\n    flagPass: false,\r\n    valid: false\r\n  });\r\n\r\n  const handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const key = target.name;\r\n\r\n   \r\n    if (key === \"name\") {\r\n      if (value.length < 4 || value.match(/[0-9]/)) {\r\n        setState({\r\n          ...state,\r\n          [key]: value,\r\n          flagName: true,\r\n        });\r\n      }\r\n      else {\r\n        setState({\r\n          ...state,\r\n          [key]: value,\r\n          flagName: false,\r\n        });\r\n      }\r\n    }\r\n    \r\n    else if (key === \"password\") {\r\n      if (value.length < 8 || !value.match(/[0-9]/)) {\r\n        setState({\r\n          ...state,\r\n          [key]: value,\r\n          flagPass: true,\r\n        });\r\n      }\r\n      else {\r\n        setState({\r\n          ...state,\r\n          [key]: value,\r\n          flagPass: false,\r\n          valid: !state.flagName ? true : false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    \r\n    // event.preventDefault();\r\n    \r\n    props.getParams(state.name, state.password);\r\n    \r\n    // state.valid\r\n    //   ? props.history.push(`/${state.name}`)\r\n    //   : props.history.push(`/`);\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    props.getParams(state.name, state.password);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit.bind(this)}>\r\n        <label>\r\n          <div style={{ color: \"red\" }}>\r\n            {state.flagName ? state.errorName : null}\r\n          </div>\r\n\r\n          <input\r\n            placeholder=\"Name\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </label>\r\n     \r\n        <label>\r\n          <div style={{ color: \"red\" }}>\r\n            {state.flagPass ? state.errorPass : null}\r\n          </div>\r\n\r\n          <input\r\n            placeholder=\"Password\"\r\n            name=\"password\"\r\n            type=\"text\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </label>\r\n      </form>\r\n\r\n      <Link to={state.name }>\r\n        <input onClick={handleClick} type=\"submit\" value=\"Send\" />\r\n      </Link>\r\n\r\n      <pre>{JSON.stringify(state, null, 2)}</pre>\r\n    </div>\r\n  );\r\n};\r\nexport default Form;\r\n","import React, { useState } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Ambulance from './components/Ambulance';\nimport Firefiters from './components/Firefiters';\nimport Form from './components/Form'\nimport HelpMe from './components/HelpMe';\nimport Police from './components/Police';\n\nfunction App() {\n\n  const [ state, setState ] = useState({\n    name: '',\n    password:'',\n  })\n\n  const getParams = (name, password) => {\n    setState({ name, password });\n  }\n\n  return (\n    <div>\n      <Switch>\n\n        <Route\n          exact\n          path=\"/\"\n          component={() => <Form getParams={getParams} />}\n        />\n\n        {/* <Route exact path=\"/Ambulance\" component={()=><Ambulance  />} />\n        <Route exact path=\"/Police\" component={Police} />\n        <Route exact path=\"/Firefiters\" component={Firefiters} /> */}\n\n        <Route exact path={`${state.name}`} component={HelpMe} />\n\n      </Switch>\n\n      {/* <pre>APP: {JSON.stringify(state, null, 2)}</pre> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter  } from \"react-router-dom\";\n\nReactDOM.render(\n\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}